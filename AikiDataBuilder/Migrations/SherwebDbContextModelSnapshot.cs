// <auto-generated />
using AikiDataBuilder.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AikiDataBuilder.Migrations
{
    [DbContext(typeof(SherwebDbContext))]
    partial class SherwebDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.CommitmentTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SubscriptionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TermEndDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId")
                        .IsUnique();

                    b.ToTable("CommitmentTerms");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.CommittedMinimalQuantity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommitmentTermId")
                        .HasColumnType("int");

                    b.Property<string>("CommittedUntil")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CommitmentTermId");

                    b.ToTable("CommittedMinimalQuantities");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.Deduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeductionType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PayableChargeId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PayableChargeId");

                    b.ToTable("Deductions");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.Fee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsTaxable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PayableChargeId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PayableChargeId");

                    b.ToTable("Fees");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PayableChargeId")
                        .HasColumnType("int");

                    b.Property<string>("PeriodFrom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeriodTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Number");

                    b.HasIndex("PayableChargeId")
                        .IsUnique();

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.LocalizedName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlatformId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.ToTable("LocalizedNames");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.MeterUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AvailableQuantities")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ConsumedQuantities")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MeterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlatformUsageId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalQuantities")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PlatformUsageId");

                    b.ToTable("MeterUsages");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.PayableCharge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BillingCycleType")
                        .HasColumnType("int");

                    b.Property<string>("ChargeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChargeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChargeType")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBilled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProratable")
                        .HasColumnType("bit");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NetPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NetPriceProrated")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PayableChargesId")
                        .HasColumnType("int");

                    b.Property<string>("PeriodFrom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeriodTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.HasIndex("PayableChargesId");

                    b.ToTable("PayableCharge");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.PayableCharges", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PeriodFrom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeriodTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PayableCharges");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.Platform", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.PlatformDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlatformId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlatformUsageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlatformUsageId")
                        .IsUnique();

                    b.ToTable("PlatformDetails");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.PlatformUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlatformId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("PlatformUsages");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.ReceivableCharge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BillingCycleType")
                        .HasColumnType("int");

                    b.Property<string>("ChargeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChargeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChargeType")
                        .HasColumnType("int");

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostPriceProrated")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsProratable")
                        .HasColumnType("bit");

                    b.Property<string>("PeriodFrom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeriodTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ReceivableChargesId")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceivableChargesId");

                    b.ToTable("ReceivableCharge");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.ReceivableCharges", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PeriodFrom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeriodTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("ReceivableCharges");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.RenewalConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommitmentTermId")
                        .HasColumnType("int");

                    b.Property<string>("RenewalDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ScheduledQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CommitmentTermId")
                        .IsUnique();

                    b.ToTable("RenewalConfigurations");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.SherwebModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuspendedOn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DisplayName");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.Subscription", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BillingCycle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PurchaseDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.SubscriptionFees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RecurringFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SetupFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SubscriptionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId")
                        .IsUnique();

                    b.ToTable("SubscriptionFees");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PayableChargeId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PayableChargeId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.Tax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AppliedRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PayableChargeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PayableChargeId");

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.CommitmentTerm", b =>
                {
                    b.HasOne("AikiDataBuilder.Model.Sherweb.Database.Subscription", "Subscription")
                        .WithOne("CommitmentTerm")
                        .HasForeignKey("AikiDataBuilder.Model.Sherweb.Database.CommitmentTerm", "SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.CommittedMinimalQuantity", b =>
                {
                    b.HasOne("AikiDataBuilder.Model.Sherweb.Database.CommitmentTerm", "CommitmentTerm")
                        .WithMany("CommittedMinimalQuantities")
                        .HasForeignKey("CommitmentTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommitmentTerm");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.Deduction", b =>
                {
                    b.HasOne("AikiDataBuilder.Model.Sherweb.Database.PayableCharge", "PayableCharge")
                        .WithMany("Deductions")
                        .HasForeignKey("PayableChargeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PayableCharge");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.Fee", b =>
                {
                    b.HasOne("AikiDataBuilder.Model.Sherweb.Database.PayableCharge", "PayableCharge")
                        .WithMany("Fees")
                        .HasForeignKey("PayableChargeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PayableCharge");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.Invoice", b =>
                {
                    b.HasOne("AikiDataBuilder.Model.Sherweb.Database.PayableCharge", "PayableCharge")
                        .WithOne("Invoice")
                        .HasForeignKey("AikiDataBuilder.Model.Sherweb.Database.Invoice", "PayableChargeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PayableCharge");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.LocalizedName", b =>
                {
                    b.HasOne("AikiDataBuilder.Model.Sherweb.Database.Platform", "Platform")
                        .WithMany("Name")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.MeterUsage", b =>
                {
                    b.HasOne("AikiDataBuilder.Model.Sherweb.Database.PlatformUsage", "PlatformUsage")
                        .WithMany("MeterUsages")
                        .HasForeignKey("PlatformUsageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlatformUsage");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.PayableCharge", b =>
                {
                    b.HasOne("AikiDataBuilder.Model.Sherweb.Database.PayableCharges", "PayableCharges")
                        .WithMany("Charges")
                        .HasForeignKey("PayableChargesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PayableCharges");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.PlatformDetails", b =>
                {
                    b.HasOne("AikiDataBuilder.Model.Sherweb.Database.PlatformUsage", "PlatformUsage")
                        .WithOne("PlatformDetails")
                        .HasForeignKey("AikiDataBuilder.Model.Sherweb.Database.PlatformDetails", "PlatformUsageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlatformUsage");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.PlatformUsage", b =>
                {
                    b.HasOne("AikiDataBuilder.Model.Sherweb.Database.SherwebModel", null)
                        .WithMany("Platform")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.ReceivableCharge", b =>
                {
                    b.HasOne("AikiDataBuilder.Model.Sherweb.Database.ReceivableCharges", "ReceivableCharges")
                        .WithMany("Charges")
                        .HasForeignKey("ReceivableChargesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceivableCharges");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.ReceivableCharges", b =>
                {
                    b.HasOne("AikiDataBuilder.Model.Sherweb.Database.SherwebModel", "Customer")
                        .WithOne("ReceivableCharges")
                        .HasForeignKey("AikiDataBuilder.Model.Sherweb.Database.ReceivableCharges", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.RenewalConfiguration", b =>
                {
                    b.HasOne("AikiDataBuilder.Model.Sherweb.Database.CommitmentTerm", "CommitmentTerm")
                        .WithOne("RenewalConfiguration")
                        .HasForeignKey("AikiDataBuilder.Model.Sherweb.Database.RenewalConfiguration", "CommitmentTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommitmentTerm");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.Subscription", b =>
                {
                    b.HasOne("AikiDataBuilder.Model.Sherweb.Database.SherwebModel", "Customer")
                        .WithMany("Subscriptions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.SubscriptionFees", b =>
                {
                    b.HasOne("AikiDataBuilder.Model.Sherweb.Database.Subscription", "Subscription")
                        .WithOne("Fees")
                        .HasForeignKey("AikiDataBuilder.Model.Sherweb.Database.SubscriptionFees", "SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.Tag", b =>
                {
                    b.HasOne("AikiDataBuilder.Model.Sherweb.Database.PayableCharge", "PayableCharge")
                        .WithMany("Tags")
                        .HasForeignKey("PayableChargeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PayableCharge");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.Tax", b =>
                {
                    b.HasOne("AikiDataBuilder.Model.Sherweb.Database.PayableCharge", "PayableCharge")
                        .WithMany("Taxes")
                        .HasForeignKey("PayableChargeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PayableCharge");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.CommitmentTerm", b =>
                {
                    b.Navigation("CommittedMinimalQuantities");

                    b.Navigation("RenewalConfiguration")
                        .IsRequired();
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.PayableCharge", b =>
                {
                    b.Navigation("Deductions");

                    b.Navigation("Fees");

                    b.Navigation("Invoice")
                        .IsRequired();

                    b.Navigation("Tags");

                    b.Navigation("Taxes");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.PayableCharges", b =>
                {
                    b.Navigation("Charges");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.Platform", b =>
                {
                    b.Navigation("Name");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.PlatformUsage", b =>
                {
                    b.Navigation("MeterUsages");

                    b.Navigation("PlatformDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.ReceivableCharges", b =>
                {
                    b.Navigation("Charges");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.SherwebModel", b =>
                {
                    b.Navigation("Platform");

                    b.Navigation("ReceivableCharges")
                        .IsRequired();

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("AikiDataBuilder.Model.Sherweb.Database.Subscription", b =>
                {
                    b.Navigation("CommitmentTerm")
                        .IsRequired();

                    b.Navigation("Fees")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
